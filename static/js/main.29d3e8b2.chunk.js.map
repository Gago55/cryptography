{"version":3,"sources":["redux/appReducer.js","redux/store.js","components/GDES.js","components/Cryptography.js","App.js","serviceWorker.js","index.js","components/Cryptography.module.css"],"names":["initialState","inputText","reducers","combineReducers","app","state","action","type","text","store","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","GDES","key","IPTable","FPTable","Key64To28Table1","Key64To28Table2","KeyShiftTable","Key56To48Table","ETable","Sboxes","pTable","encryptedText","encrypt","binarKey","textToBin","key28_1","key64to28","key28_2","allKeys","generateAllKeys","countOf64Bits","Math","ceil","length","match","i","binarText","initialText","initialPermutation","splitText","tmp","rText","fResult","functionFeistel","xorReturnArray","lText","finalPermutated","finalPermutation","join","encryptedTextHex","convertBase","binText","Array","charCodeAt","toString","push","charAt","finalText","table","key28","leftShiftKey28","key56","key56to48","key48","n","j","rText48","E","splitedS","xorReturnString","sResult","sub","fisrtAndLast","parseInt","middle","decNum","count","startOfNum","PPermutation","text32","newText32","text48","a","b","c","bigint","inputBase","outputBase","remainder","inputValues","base","values","parseBigInt","outputValues","len","pos","floor","reverse","formatBigInt","this","connect","dispatch","setInputText","setInputTextAC","props","useState","algorithm","setAlgorithm","result","setResult","logs","setLogs","setKey","needKey","setNeedKey","useEffect","className","styles","mainDiv","TextField","id","label","value","onChange","event","target","FormControl","InputLabel","Select","labelId","MenuItem","Button","style","margin","onClick","startTime","performance","now","CryptoJS","DES","endTime","duration","toFixed","toUpperCase","TripleDES","g","AES","Rabbit","hash","MD5","SHA1","SHA256","SHA512","multiline","InputProps","readOnly","variant","marginTop","fullWidth","rowsMax","App","href","Boolean","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"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G,GAAI,GAAI,EAAG,EAAG,GAAI,EAAG,EAAG,GAAI,GACpD,CAAC,EAAG,GAAI,EAAG,GAAI,GAAI,EAAG,GAAI,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,IACnD,CAAC,GAAI,EAAG,GAAI,EAAG,EAAG,GAAI,EAAG,EAAG,GAAI,EAAG,EAAG,GAAI,EAAG,EAAG,GAAI,IAExD,CACI,CAAC,GAAI,EAAG,EAAG,GAAI,EAAG,EAAG,GAAI,EAAG,EAAG,GAAI,GAAI,EAAG,GAAI,EAAG,EAAG,GACpD,CAAC,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GACpD,CAAC,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,GAAI,EAAG,EAAG,GAAI,EAAG,GAAI,GAAI,GACpD,CAAC,EAAG,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,EAAG,GAAI,EAAG,EAAG,KAEvD,CACI,CAAC,EAAG,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,EAAG,IACnD,CAAC,GAAI,EAAG,GAAI,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,GAAI,GAAI,GACpD,CAAC,GAAI,EAAG,EAAG,EAAG,GAAI,GAAI,EAAG,GAAI,GAAI,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,GACpD,CAAC,EAAG,GAAI,EAAG,EAAG,GAAI,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,EAAG,EAAG,KAEvD,CACI,CAAC,EAAG,GAAI,EAAG,EAAG,EAAG,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,EAAG,GAAI,GACpD,CAAC,GAAI,GAAI,EAAG,GAAI,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,GAAI,GAAI,EAAG,EAAG,EAAG,GACpD,CAAC,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,EAAG,EAAG,GAAI,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,IACnD,CAAC,GAAI,EAAG,GAAI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","file":"static/js/main.29d3e8b2.chunk.js","sourcesContent":["const SETINPUTTEXT = './app/SETINPUTTEXT'\r\n\r\nlet initialState ={\r\n    inputText : \"\"\r\n}\r\n\r\nexport default (state = initialState,action) => {\r\n    switch(action.type){\r\n        case SETINPUTTEXT :\r\n            return{\r\n                ...state,\r\n                inputText : action.text\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setInputTextAC = text => ({type:SETINPUTTEXT , text})","import { createStore, combineReducers } from \"redux\";\r\nimport appReducer from \"./appReducer\";\r\n\r\nlet reducers = combineReducers({\r\n    app : appReducer\r\n})\r\n\r\nlet store = createStore(reducers , window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__())\r\n\r\nexport default store","class GDES {\r\n    text //Text to Encrypt\r\n    key //Key for Encrypt\r\n\r\n    IPTable = [\r\n        58, 50, 42, 34, 26, 18, 10, 2, 60, 52, 44, 36, 28, 20, 12, 4,\r\n        62, 54, 46, 38, 30, 22, 14, 6, 64, 56, 48, 40, 32, 24, 16, 8,\r\n        57, 49, 41, 33, 25, 17, 9, 1, 59, 51, 43, 35, 27, 19, 11, 3,\r\n        61, 53, 45, 37, 29, 21, 13, 5, 63, 55, 47, 39, 31, 23, 15, 7\r\n    ]\r\n    FPTable = [\r\n        40, 8, 48, 16, 56, 24, 64, 32, 39, 7, 47, 15, 55, 23, 63, 31,\r\n        38, 6, 46, 14, 54, 22, 62, 30, 37, 5, 45, 13, 53, 21, 61, 29,\r\n        36, 4, 44, 12, 52, 20, 60, 28, 35, 3, 43, 11, 51, 19, 59, 27,\r\n        34, 2, 42, 10, 50, 18, 58, 26, 33, 1, 41, 9, 49, 17, 57, 25\r\n    ]\r\n\r\n    Key64To28Table1 = [\r\n        57, 49, 41, 33, 25, 17, 9, 1, 58, 50, 42, 34, 26, 18,\r\n        10, 2, 59, 51, 43, 35, 27, 19, 11, 3, 60, 52, 44, 36\r\n    ]\r\n    Key64To28Table2 = [\r\n        63, 55, 47, 39, 31, 23, 15, 7, 62, 54, 46, 38, 30, 22,\r\n        14, 6, 61, 53, 45, 37, 29, 21, 13, 5, 28, 20, 12, 4\r\n    ]\r\n    KeyShiftTable = [\r\n        1, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1\r\n    ]\r\n    Key56To48Table = [\r\n        14, 17, 11, 24, 1, 5, 3, 28, 15, 6, 21, 10, 23, 19, 12, 4,\r\n        26, 8, 16, 7, 27, 20, 13, 2, 41, 52, 31, 37, 47, 55, 30, 40,\r\n        51, 45, 33, 48, 44, 49, 39, 56, 34, 53, 46, 42, 50, 36, 29, 32\r\n    ]\r\n    ETable = [\r\n        32, 1, 2, 3, 4, 5,\r\n        4, 5, 6, 7, 8, 9,\r\n        8, 9, 10, 11, 12, 13,\r\n        12, 13, 14, 15, 16, 17,\r\n        16, 17, 18, 19, 20, 21,\r\n        20, 21, 22, 23, 24, 25,\r\n        24, 25, 26, 27, 28, 29,\r\n        28, 29, 30, 31, 32, 1\r\n    ]\r\n    Sboxes = [\r\n        [ // 0\r\n            [14, 4, 13, 1, 2, 15, 11, 8, 3, 10, 6, 12, 5, 9, 0, 7],\r\n            [0, 15, 7, 4, 14, 2, 13, 1, 10, 6, 12, 11, 9, 5, 3, 8],\r\n            [4, 1, 14, 8, 13, 6, 2, 11, 15, 12, 9, 7, 3, 10, 5, 0],\r\n            [15, 12, 8, 2, 4, 9, 1, 7, 5, 11, 3, 14, 10, 0, 6, 13],\r\n        ],\r\n        [ // 1\r\n            [15, 1, 8, 14, 6, 11, 3, 4, 9, 7, 2, 13, 12, 0, 5, 10],\r\n            [3, 13, 4, 7, 15, 2, 8, 14, 12, 0, 1, 10, 6, 9, 11, 5],\r\n            [0, 14, 7, 11, 10, 4, 13, 1, 5, 8, 12, 6, 9, 3, 2, 15],\r\n            [13, 8, 10, 1, 3, 15, 4, 2, 11, 6, 7, 12, 0, 5, 14, 9],\r\n        ],\r\n        [ // 2\r\n            [10, 0, 9, 14, 6, 3, 15, 5, 1, 13, 12, 7, 11, 4, 2, 8],\r\n            [13, 7, 0, 9, 3, 4, 6, 10, 2, 8, 5, 14, 12, 11, 15, 1],\r\n            [13, 6, 4, 9, 8, 15, 3, 0, 11, 1, 2, 12, 5, 10, 14, 7],\r\n            [1, 10, 13, 0, 6, 9, 8, 7, 4, 15, 14, 3, 11, 5, 2, 12],\r\n        ],\r\n        [ // 3\r\n            [7, 13, 14, 3, 0, 6, 9, 10, 1, 2, 8, 5, 11, 12, 4, 15],\r\n            [13, 8, 11, 5, 6, 15, 0, 3, 4, 7, 2, 12, 1, 10, 14, 9],\r\n            [10, 6, 9, 0, 12, 11, 7, 13, 15, 1, 3, 14, 5, 2, 8, 4],\r\n            [3, 15, 0, 6, 10, 1, 13, 8, 9, 4, 5, 11, 12, 7, 2, 14],\r\n        ],\r\n        [ // 4\r\n            [2, 12, 4, 1, 7, 10, 11, 6, 8, 5, 3, 15, 13, 0, 14, 9],\r\n            [14, 11, 2, 12, 4, 7, 13, 1, 5, 0, 15, 10, 3, 9, 8, 6],\r\n            [4, 2, 1, 11, 10, 13, 7, 8, 15, 9, 12, 5, 6, 3, 0, 14],\r\n            [11, 8, 12, 7, 1, 14, 2, 13, 6, 15, 0, 9, 10, 4, 5, 3],\r\n        ],\r\n        [ // 5\r\n            [12, 1, 10, 15, 9, 2, 6, 8, 0, 13, 3, 4, 14, 7, 5, 11],\r\n            [10, 15, 4, 2, 7, 12, 9, 5, 6, 1, 13, 14, 0, 11, 3, 8],\r\n            [9, 14, 15, 5, 2, 8, 12, 3, 7, 0, 4, 10, 1, 13, 11, 6],\r\n            [4, 3, 2, 12, 9, 5, 15, 10, 11, 14, 1, 7, 6, 0, 8, 13],\r\n        ],\r\n        [ // 6\r\n            [4, 11, 2, 14, 15, 0, 8, 13, 3, 12, 9, 7, 5, 10, 6, 1],\r\n            [13, 0, 11, 7, 4, 9, 1, 10, 14, 3, 5, 12, 2, 15, 8, 6],\r\n            [1, 4, 11, 13, 12, 3, 7, 14, 10, 15, 6, 8, 0, 5, 9, 2],\r\n            [6, 11, 13, 8, 1, 4, 10, 7, 9, 5, 0, 15, 14, 2, 3, 12],\r\n        ],\r\n        [ // 7\r\n            [13, 2, 8, 4, 6, 15, 11, 1, 10, 9, 3, 14, 5, 0, 12, 7],\r\n            [1, 15, 13, 8, 10, 3, 7, 4, 12, 5, 6, 11, 0, 14, 9, 2],\r\n            [7, 11, 4, 1, 9, 12, 14, 2, 0, 6, 10, 13, 15, 3, 5, 8],\r\n            [2, 1, 14, 7, 4, 10, 8, 13, 15, 12, 9, 0, 3, 5, 6, 11],\r\n        ]\r\n    ]\r\n    pTable = [\r\n        16, 7, 20, 21, 29, 12, 28, 17,\r\n        1, 15, 23, 26, 5, 18, 31, 10,\r\n        2, 8, 24, 14, 32, 27, 3, 9,\r\n        19, 13, 30, 6, 22, 11, 4, 25\r\n    ]\r\n\r\n    binarText //Array which contain Binar Numbers of Text's Letters \r\n    initialText //Array after Initian Permutation\r\n    binarKey //Array which contain Binar Numbers of Key's Letters \r\n\r\n    key28_1 //Key after method key64to56()\r\n    key28_2 //Key after method key64to56()\r\n    allKeys //16 keys for 16 rounds\r\n\r\n    lText //Array which contain fisrt part of text\r\n    rtext //Array which contain second part of text\r\n\r\n    encryptedText = ''\r\n    encryptedTextHex\r\n\r\n    constructor(text, key) {\r\n        this.text = text\r\n        this.key = key\r\n\r\n        this.encrypt()\r\n    }\r\n\r\n    encrypt = () => {\r\n        //Generation Keys\r\n        this.binarKey = this.textToBin(this.key)\r\n\r\n        this.key28_1 = this.key64to28(this.Key64To28Table1)\r\n        this.key28_2 = this.key64to28(this.Key64To28Table2)\r\n        this.allKeys = this.generateAllKeys()\r\n\r\n        let countOf64Bits = Math.ceil(this.text.length / 8)\r\n        this.text = this.text.match(/.{1,8}/g)\r\n\r\n        for (let i = 0; i < countOf64Bits; i++) {\r\n            this.binarText = this.textToBin(this.text[i])\r\n            this.initialText = this.initialPermutation()\r\n\r\n            //Spliting Text\r\n            this.splitText()\r\n\r\n            //Encription\r\n            for (let i = 0; i < 16; i++) {//16 Rounds\r\n                if (i !== 15) {\r\n                    let tmp = this.rText\r\n                    let fResult = this.functionFeistel(this.rText, this.allKeys[i])\r\n                    this.rText = this.xorReturnArray(this.lText, fResult)\r\n                    this.lText = tmp\r\n                }\r\n                else {//Last Round\r\n                    let fResult = this.functionFeistel(this.rText, this.allKeys[i])\r\n                    this.lText = this.xorReturnArray(this.lText, fResult)\r\n                }\r\n            }\r\n            //Joining parts of text\r\n            let encryptedText = [...this.lText, ...this.rText]\r\n\r\n            //Final Permutation\r\n            let finalPermutated = this.finalPermutation(encryptedText)\r\n            this.encryptedText += finalPermutated.join('')\r\n        }\r\n        this.encryptedTextHex = this.convertBase(this.encryptedText, 2, 16)\r\n    }\r\n\r\n    textToBin = text => {\r\n        let binText = new Array(text.length)\r\n        for (let i = 0; i < text.length; i++) {\r\n            binText[i] = 0 + \"\" + text.charCodeAt(i).toString(2) //text.charCodeAt(i) return ASCII code of letter\r\n        }\r\n\r\n        if (binText.length % 8 !== 0) {\r\n            let count = 8 - (8 % 5)\r\n            for (let i = 0; i < count; i++) {\r\n                binText.push('00000000')\r\n            }\r\n        }\r\n\r\n        return binText\r\n    }\r\n    initialPermutation = () => {\r\n        let initialText = new Array(64)\r\n        for (let i = 0; i < 64; i++) {\r\n            initialText[i] = this.binarText.join(\"\").charAt(this.IPTable[i] - 1)\r\n        }\r\n        return initialText\r\n    }\r\n    finalPermutation = (text) => {\r\n        let finalText = new Array(64)\r\n        for (let i = 0; i < 64; i++) {\r\n            finalText[i] = text.join('').charAt(this.FPTable[i] - 1)\r\n        }\r\n        return finalText\r\n    }\r\n    key64to28 = (table) => {\r\n        let key28 = new Array(28)\r\n        for (let i = 0; i < 28; i++) {\r\n            key28[i] = this.binarKey.join('').charAt(table[i] - 1)\r\n        }\r\n        return key28\r\n    }\r\n    generateAllKeys = () => {\r\n        let allKeys = new Array(16)\r\n        for (let i = 0; i < 16; i++) {\r\n            this.key28_1 = this.leftShiftKey28(this.key28_1, this.KeyShiftTable[i])\r\n            this.key28_2 = this.leftShiftKey28(this.key28_2, this.KeyShiftTable[i])\r\n\r\n            let key56 = this.key28_1.join('') + this.key28_2.join('')\r\n            allKeys[i] = this.key56to48(key56)\r\n        }\r\n        return allKeys\r\n    }\r\n    key56to48 = (key56) => {\r\n        let key48 = new Array(48)\r\n        for (let i = 0; i < 48; i++) {\r\n            key48[i] = key56.charAt(this.Key56To48Table[i] - 1)\r\n        }\r\n        return key48\r\n    }\r\n    leftShiftKey28 = (key, n) => {\r\n        for (let i = 0; i < n; i++) {\r\n            let tmp = key[0]\r\n            for (let j = 0; j < key.length - 1; j++) {\r\n                key[j] = key[j + 1]\r\n            }\r\n            key[27] = tmp\r\n        }\r\n        return key\r\n    }\r\n\r\n    splitText = () => {\r\n        this.lText = new Array(32)\r\n        this.rText = new Array(32)\r\n\r\n        for (var i = 0; i < 32; i++) {\r\n            this.lText[i] = this.initialText.join(\"\").charAt(i)\r\n        }\r\n        let j = 0\r\n        for (let i = 32; i < 64; i++) {\r\n            this.rText[j] = this.initialText.join(\"\").charAt(i)\r\n            j++\r\n        }\r\n    }\r\n\r\n    functionFeistel = (rText, key) => {//return array\r\n        let rText48 = this.E(rText)\r\n        let s = this.xorReturnString(rText48, key)\r\n        let splitedS = s.match(/.{1,6}/g) //split s into 8 chunks \r\n        let sResult = ''\r\n\r\n        for (let i = 0; i < 8; i++) {\r\n            let sub = splitedS[i]\r\n            let fisrtAndLast = parseInt(sub.charAt(0) + sub.charAt(5), 2)\r\n            let middle = parseInt(sub.charAt(1) + sub.charAt(2) + sub.charAt(3) + sub.charAt(4), 2)\r\n\r\n            let numberFormSbox = this.Sboxes[i][fisrtAndLast][middle]\r\n            let decNum = numberFormSbox.toString(2)\r\n\r\n            if (decNum.length % 4 !== 0) { //Adding 0 to start of number if its length is less then 4\r\n                let count = 4 - decNum.length % 4\r\n                let startOfNum = ''\r\n                for (let i = 0; i < count; i++) {\r\n                    startOfNum += '0'\r\n                }\r\n                decNum = startOfNum + decNum\r\n            }\r\n            sResult += decNum\r\n        }\r\n\r\n        //Final permutation\r\n        sResult = this.PPermutation(sResult)\r\n        return sResult\r\n    }\r\n\r\n    PPermutation = (text32) => {\r\n        let newText32 = new Array(32)\r\n        for (let i = 0; i < 32; i++) {\r\n            newText32[i] = text32.charAt(this.pTable[i] - 1)\r\n        }\r\n        return newText32\r\n    }\r\n\r\n    E = (rText) => {\r\n        let text48 = new Array(48)\r\n        for (let i = 0; i < 48; i++) {\r\n            text48[i] = rText.join('').charAt(this.ETable[i] - 1)\r\n        }\r\n        return text48\r\n    }\r\n\r\n    xorReturnString = (a, b) => { //a and b are arrays\r\n        let c = ''\r\n\r\n        a = a.join('')\r\n        b = b.join('')\r\n\r\n        for (let i = 0; i < a.length; i++) {\r\n            c += a[i] ^ b[i]\r\n        }\r\n\r\n        return c\r\n    }\r\n    xorReturnArray = (a, b) => { //a and b are arrays\r\n        let c = new Array(a.length)\r\n\r\n        a = a.join('')\r\n        b = b.join('')\r\n\r\n        for (let i = 0; i < a.length; i++) {\r\n            c[i] = a[i] ^ b[i]\r\n        }\r\n\r\n        return c\r\n    }\r\n\r\n    convertBase = (bigint, inputBase, outputBase) => { //Coneverter long numbers \r\n        function parseBigInt(bigint, base) {\r\n            //convert bigint string to array of digit values\r\n            for (var values = [], i = 0; i < bigint.length; i++) {\r\n                values[i] = parseInt(bigint.charAt(i), base);\r\n            }\r\n            return values;\r\n        }\r\n\r\n        function formatBigInt(values, base) {\r\n            //convert array of digit values to bigint string\r\n            for (var bigint = '', i = 0; i < values.length; i++) {\r\n                bigint += values[i].toString(base);\r\n            }\r\n            return bigint;\r\n        }\r\n\r\n        //takes a bigint string and converts to different base\r\n        var inputValues = parseBigInt(bigint, inputBase),\r\n            outputValues = [], //output array, little-endian/lsd order\r\n            remainder,\r\n            len = inputValues.length,\r\n            pos = 0,\r\n            i;\r\n        while (pos < len) { //while digits left in input array\r\n            remainder = 0; //set remainder to 0\r\n            for (i = pos; i < len; i++) {\r\n                //long integer division of input values divided by output base\r\n                //remainder is added to output array\r\n                remainder = inputValues[i] + remainder * inputBase;\r\n                inputValues[i] = Math.floor(remainder / outputBase);\r\n                remainder -= inputValues[i] * outputBase;\r\n                if (inputValues[i] == 0 && i == pos) {\r\n                    pos++;\r\n                }\r\n            }\r\n            outputValues.push(remainder);\r\n        }\r\n        outputValues.reverse(); //transform to big-endian/msd order\r\n        return formatBigInt(outputValues, outputBase);\r\n    }\r\n}\r\n\r\nexport default GDES","import React, { useState, useEffect } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport styles from './Cryptography.module.css'\r\nimport TextField from '@material-ui/core/TextField'\r\nimport { FormControl, InputLabel, Select, MenuItem, Button } from '@material-ui/core'\r\nimport { setInputTextAC } from '../redux/appReducer'\r\nimport CryptoJS from 'crypto-js'\r\nimport GDES from './GDES'\r\n\r\nconst Cryptography = (props) => {\r\n    const [algorithm, setAlgorithm] = useState('des')\r\n    const [result, setResult] = useState('')\r\n    const [logs, setLogs] = useState('')\r\n    const [key, setKey] = useState('')\r\n    const [needKey, setNeedKey] = useState(true)\r\n\r\n\r\n    useEffect( ()=>{\r\n        if(algorithm === 'md5' || algorithm === 'sha1' || algorithm === 'sha256'  || algorithm === 'sha512'){\r\n            setNeedKey(false)\r\n        }else{\r\n            setNeedKey(true)\r\n        }   \r\n    })\r\n\r\n\r\n    const handleInputChange = event => {\r\n        props.setInputText(event.target.value)\r\n    }\r\n\r\n    const handleSelectChange = event => {\r\n        setAlgorithm(event.target.value)\r\n    }\r\n\r\n    const handleKeyInputChange = event => {\r\n        setKey(event.target.value)\r\n    }\r\n\r\n    const handleButtonClick = () => {          \r\n        if (algorithm === 'des') {\r\n            let startTime = performance.now()\r\n            let encryptedText = CryptoJS.DES.encrypt(props.inputText, key)\r\n            let endTime = performance.now() \r\n            setResult(encryptedText)\r\n            let duration = (endTime - startTime).toFixed(2)\r\n            setLogs(logs + `${algorithm.toUpperCase()} --> Key:\"${key}\" Input:\"${props.inputText}\"   Output:\"${encryptedText}\" Duration ${duration}ms \\n`)\r\n        }\r\n        else if(algorithm === 'tripledes'){\r\n            let startTime = performance.now()\r\n            let encryptedText = CryptoJS.TripleDES.encrypt(props.inputText, key)\r\n            let endTime = performance.now() \r\n            setResult(encryptedText)\r\n            let duration = (endTime - startTime).toFixed(2)\r\n            setLogs(logs + `${algorithm.toUpperCase()} --> Key:\"${key}\" Input:\"${props.inputText}\"   Output:\"${encryptedText}\" Duration ${duration}ms \\n`)\r\n        }\r\n        else if(algorithm === 'gdes'){\r\n            let startTime = performance.now()\r\n            let g = new GDES(props.inputText, key)\r\n            let endTime = performance.now() \r\n            setResult(g.encryptedTextHex)\r\n            let duration = (endTime - startTime).toFixed(2)\r\n            setLogs(logs + `${algorithm.toUpperCase()} --> Key:\"${key}\" Input:\"${props.inputText}\"   Output:\"${g.encryptedTextHex}\" Duration ${duration}ms \\n`)\r\n        }\r\n        else if(algorithm === 'aes'){\r\n            let startTime = performance.now()\r\n            let encryptedText = CryptoJS.AES.encrypt(props.inputText, key)\r\n            let endTime = performance.now() \r\n            setResult(encryptedText)\r\n            let duration = (endTime - startTime).toFixed(2)\r\n            setLogs(logs + `${algorithm.toUpperCase()} --> Key:\"${key}\" Input:\"${props.inputText}\"   Output:\"${encryptedText}\" Duration ${duration}ms \\n`)\r\n        }\r\n        else if(algorithm === 'rabbit'){\r\n            let startTime = performance.now()\r\n            let encryptedText = CryptoJS.Rabbit.encrypt(props.inputText, key)\r\n            let endTime = performance.now() \r\n            setResult(encryptedText)\r\n            let duration = (endTime - startTime).toFixed(2)\r\n            setLogs(logs + `${algorithm.toUpperCase()} --> Key:\"${key}\" Input:\"${props.inputText}\"   Output:\"${encryptedText}\" Duration ${duration}ms \\n`)\r\n        }\r\n        else if(algorithm === 'md5'){\r\n            let startTime = performance.now()\r\n            let hash = CryptoJS.MD5(props.inputText)\r\n            let endTime = performance.now() \r\n            setResult(hash)\r\n            let duration = (endTime - startTime).toFixed(2)\r\n            setLogs(logs + `${algorithm.toUpperCase()} --> Input:\"${props.inputText}\"   Hash:\"${hash}\" Duration ${duration}ms \\n`)\r\n        }\r\n        else if(algorithm === 'sha1'){\r\n            let startTime = performance.now()\r\n            let hash = CryptoJS.SHA1(props.inputText)\r\n            let endTime = performance.now() \r\n            setResult(hash)\r\n            let duration = (endTime - startTime).toFixed(2)\r\n            setLogs(logs + `${algorithm.toUpperCase()} --> Input:\"${props.inputText}\"   Hash:\"${hash}\" Duration ${duration}ms \\n`)\r\n        }\r\n        else if(algorithm === 'sha256'){\r\n            let startTime = performance.now()\r\n            let hash = CryptoJS.SHA256(props.inputText)\r\n            let endTime = performance.now() \r\n            setResult(hash)\r\n            let duration = (endTime - startTime).toFixed(2)\r\n            setLogs(logs + `${algorithm.toUpperCase()} --> Input:\"${props.inputText}\"   Hash:\"${hash}\" Duration ${duration}ms \\n`)\r\n        }\r\n        else if(algorithm === 'sha512'){\r\n            let startTime = performance.now()\r\n            let hash = CryptoJS.SHA512(props.inputText)\r\n            let endTime = performance.now() \r\n            setResult(hash)\r\n            let duration = (endTime - startTime).toFixed(2)\r\n            setLogs(logs + `${algorithm.toUpperCase()} --> Input:\"${props.inputText}\"   Hash:\"${hash}\" Duration ${duration}ms \\n`)\r\n        }\r\n   \r\n    }\r\n\r\n    return (\r\n        <div className={styles.mainDiv}>\r\n            <TextField id=\"standard-basic\" label=\"Input Text\" value={props.inputText} onChange={handleInputChange} />\r\n            <FormControl >\r\n                <InputLabel id=\"demo-simple-select-label\">Algorithm</InputLabel>\r\n                <Select\r\n                    labelId=\"demo-simple-select-label\"\r\n                    id=\"demo-simple-select\"\r\n                    value={algorithm}\r\n                    onChange={handleSelectChange}\r\n                >\r\n                    <MenuItem value={'des'}>DES</MenuItem>\r\n                    <MenuItem value={'tripledes'}>TripleDES</MenuItem>\r\n                    <MenuItem value={'gdes'}>GDES</MenuItem>\r\n                    <MenuItem value={'aes'}>AES</MenuItem>\r\n                    <MenuItem value={'rabbit'}>Rabbit</MenuItem>\r\n                    <MenuItem value={'md5'}>MD5</MenuItem>\r\n                    <MenuItem value={'sha1'}>SHA1</MenuItem>\r\n                    <MenuItem value={'sha256'}>SHA256</MenuItem>\r\n                    <MenuItem value={'sha512'}>SHA512</MenuItem>\r\n                </Select>\r\n            </FormControl><br />\r\n            {  \r\n                needKey && <TextField id=\"standard-basic\" label=\"Input Key\" value={key} onChange={handleKeyInputChange} />\r\n            }<br />\r\n            <Button style={{ margin: '15px' }} onClick={handleButtonClick}>{needKey ? \"Encrypt\" : \"Hash\"}</Button><br />\r\n            <TextField\r\n                id=\"outlined-read-only-input\"\r\n                label=\"Result\"\r\n                value={result}\r\n                margin=\"normal\"\r\n                multiline\r\n                InputProps={{\r\n                    readOnly: true,\r\n                }}\r\n                variant=\"outlined\"\r\n            /><br />\r\n            <TextField\r\n                id=\"outlined-read-only-input\"\r\n                label=\"Logs\"\r\n                value={logs}\r\n                style={{marginTop:'50px'}}\r\n                margin=\"normal\"\r\n                multiline\r\n                fullWidth\r\n                rowsMax={18}\r\n                InputProps={{\r\n                    readOnly: true,\r\n                }}\r\n                variant=\"outlined\"\r\n            />\r\n        </div>\r\n    )\r\n}\r\nlet mapStateToProps = state => ({\r\n    inputText: state.app.inputText\r\n})\r\n\r\nlet mapDispatchToProps = dispatch => ({\r\n    setInputText: (text) => {\r\n        dispatch(setInputTextAC(text))\r\n    }\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Cryptography)","import React from 'react';\nimport './App.css';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\nimport Cryptography from './components/Cryptography';\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <div className='root'>\n        <Cryptography />\n        <a target=\"_blank\" href={'https://www.browserling.com/tools/des-decrypt'}>DES Decryptor</a><br/>\n        <a target=\"_blank\" href={'https://www.browserling.com/tools/triple-des-decrypt'}>TripleDES Decryptor</a><br/>\n        <a target=\"_blank\" href={'http://des.online-domain-tools.com/'}>GDES Decryptor</a><br/>\n      </div>\n    </Provider>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainDiv\":\"Cryptography_mainDiv__2av4l\"};"],"sourceRoot":""}